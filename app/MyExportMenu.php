<?php

/**
 * @package   yii2-export
 * @author    Kartik Visweswaran <kartikv2@gmail.com>
 * @copyright Copyright &copy; Kartik Visweswaran, Krajee.com, 2015
 * @version   1.2.3
 */

namespace app;

use \Yii;
use yii\helpers\ArrayHelper;

/**
 * Export menu widget. Export tabular data to various formats using the PHPExcel library
 * by reading data from a dataProvider - with configuration very similar to a GridView.
 *
 * @author Kartik Visweswaran <kartikv2@gmail.com>
 * @since  1.0
 */
class MyExportMenu extends \kartik\export\MyExportMenu
{
    public $autoFilter = false;
    
    public $freezeHeader = false;
    
    
    /**
     * Initializes PHP Excel Object Instance
     *
     * @return void
     */
    public function initPHPExcel()
    {
        parent::initPHPExcel();
        $this->_objPHPExcel->getProperties()
            ->setDescription(G::t('Export generated by Geely manhour system'))
            ->setCompany('Geely Auto')
            ->setLastModifiedBy('admin');
    }

    /**
     * Generates the output data header content.
     *
     * @return void
     */
    public function generateHeader()
    {
        $columns = $this->getVisibleColumns();
        if (count($columns) == 0) {
            return;
        }
        $sheet = $this->_objPHPExcelSheet;       
        $this->raiseEvent('beforeHeader', [$sheet, count($columns), $this]);

        $style = ArrayHelper::getValue($this->styleOptions, $this->_exportType, []);
        $colFirst = self::columnName(1);
        if (!empty($this->caption)) {
            $sheet->setCellValue($colFirst . $this->_beginRow, $this->caption, true);
            $this->_beginRow += 2;
        }
        $this->_endCol = 0;
        foreach ($this->getVisibleColumns() as $column) {
            $this->_endCol++;
            /**
             * @var Column $column
             */
            $head = ($column instanceof DataColumn) ? $this->getColumnHeader($column) : $column->header;
            $id = self::columnName($this->_endCol) . $this->_beginRow;
            $cell = $sheet->setCellValue($id, $head, true);
            // Apply formatting to header cell
            $sheet->getStyle($id)->applyFromArray($style);
            $this->raiseEvent('onRenderHeaderCell', [$cell, $head, $this]);
        }
        for ($i = $this->_headerBeginRow; $i < ($this->_beginRow - 1); $i++) {
            $sheet->mergeCells($colFirst . $i . ":" . self::columnName($this->_endCol) . $i);
            $sheet->getStyle($colFirst . $i)->applyFromArray($style);
        }
        // Freeze the top row
        if ($this->freezeHeader) {
            $sheet->freezePane($colFirst . ($this->_beginRow + 1));
        }
        
        $this->raiseEvent('afterHeader', [$sheet, count($columns), $this]);
    }


    /**
     * Generates the output data body content.
     *
     * @return int the number of output rows.
     */
    public function generateBody()
    {
        $this->_endRow = 0;
        $columns = $this->getVisibleColumns();
        $models = array_values($this->_provider->getModels());
        if (count($columns) == 0) {
            $cell = $this->_objPHPExcelSheet->setCellValue('A1', $this->emptyText, true);
            $model = reset($models);
            $this->raiseEvent('onRenderDataCell', [$cell, $this->emptyText, $model, null, 0, $this]);
            return 0;
        }
        while (count($models) > 0) {
            $keys = $this->_provider->getKeys();
            foreach ($models as $index => $model) {
                $key = $keys[$index];
                $this->generateRow($model, $key, $this->_endRow);
                $this->_endRow++;
            }
            if ($this->_provider->pagination) {
                $this->_provider->pagination->page++;
                $this->_provider->refresh();
                $models = $this->_provider->getModels();
            } else {
                $models = [];
            }
        }

        // Set autofilter on
        if ($this->autoFilter)
        {
            $this->_objPHPExcelSheet->setAutoFilter(
                self::columnName(1) .
                $this->_beginRow .
                ":" .
                self::columnName($this->_endCol) .
                $this->_endRow
            );
        }
        return ($this->_endRow > 0) ? count($models) : 0;
    }

    /**
     * Generates the output footer row after a specific row number
     *
     * @param int $row the row number after which the footer is to be generated
     */
    public function generateFooter($row)
    {        
        parent::generateFooter($row);
        $this->raiseEvent('onRenderFooter', [$this->_objPHPExcelSheet, $this]);
    }

}